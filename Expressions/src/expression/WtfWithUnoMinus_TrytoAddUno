package expression;

public class translateExpression {

    public static CommonExpression parse (final String source) {return new CommonExpressionParser(new StringSource(source)).parseElement();}

    private static class CommonExpressionParser extends BaseParser{

        public CommonExpressionParser(StringSource data) {
            super(data);
            nextChar();
        }

        private CommonExpression parseElement() {
            skipWhitespace();
            CommonExpression result = null;
            while (ch != '\0') {
                result = parseValue(0, result);
            }
            return result;
        }

        private CommonExpression isLegalExpression(CommonExpression out) {
            if (out == null) {
                throw new ExpressionException("Illegal expression");
            }
            return out;
        }

        private CommonExpression parseValue(int lvl, CommonExpression leftOperand) {
            //CommonExpression rightOperand = null;
            while (ch != '\0') {
                skipWhitespace();
                if (nextIsDigit(ch)) {
                    leftOperand = getConst();
                }
                if (test('(')) {
                    leftOperand = parseValue(0, null);
                }
                if (test(')')) {
                    return leftOperand;
                }
                if (test('+')) {
                    if (leftOperand == null) {
                        leftOperand = parseSumSub(leftOperand, lvl, '+');
                    } else {
                        return parseSumSub(leftOperand, lvl, '+');
                    }
                }
                if (test('-')) {
                    if (leftOperand == null) {
                        leftOperand = parseSumSub(leftOperand, lvl, '-');
                    } else {
                        return parseSumSub(leftOperand, lvl, '-');
                    }
                }
                if (test('*')) {
                    return parseMultDev(leftOperand, lvl, '*');
                }
                if (test('/')) {
                    return parseMultDev(leftOperand, lvl, '/');
                } else if (ch != '\0') {
                    leftOperand = parseVariable();
                }
            }
            return leftOperand;
            }


        private CommonExpression parseSumSub(CommonExpression leftOperand, int lvl, char ch) {
            if (lvl > 1 && leftOperand != null) {
                backChar();
                return leftOperand;
            }
            CommonExpression temp = leftOperand;
            if (temp == null) {
                temp = new Const(0);
            }
            if (lvl == 0 || leftOperand == null) {
                if (ch == '-') {
                    return new Subtract(temp, parseValue(1, null));
                } else {
                    return new Add(isLegalExpression(temp), parseValue(1, null));}
            } else {
                backChar();
                return leftOperand;
            }
        }

        private CommonExpression parseMultDev(CommonExpression leftOperand, int lvl, char ch) {
            if (lvl == 2) {
                backChar();
                return leftOperand;
            }
            if (ch == '*') {
                return new Multiply(isLegalExpression(leftOperand), parseValue(2, null));
            }  else {
                return new Divide(isLegalExpression(leftOperand), parseValue(2, null));
            }
        }


        private Variable parseVariable() {
            StringBuilder variableName = new StringBuilder();
            while (!Character.isWhitespace(ch) && ch != '\0' && ch != '\n'&& ch != ')' && ch != '(' && ch != '+' && ch != '-' && ch != '/' && ch!='*') {
                variableName.append(ch);
                nextChar();
            }
            return new Variable(variableName.toString());
        }

        private void copyDigits(final StringBuilder sb) {
            while (between('0', '9')) {
                sb.append(ch);
                nextChar();
            }
        }
        private void copyInteger(StringBuilder sb) {
            skipWhitespace();
            if (test('-')) {
                sb.append('-');
            }
            if (between('1', '9')) {
                copyDigits(sb);
                skipWhitespace();
            } else {
                throw new IllegalStateException();
            }
        }
        private Const getConst() {
            StringBuilder sb = new StringBuilder();
            copyInteger(sb);
            skipWhitespace();
            return new Const(Integer.parseInt(sb.toString()));
        }


        private void skipWhitespace() {
            while (test(' ') || test('\r') || test('\n') || test('\t')) {
                // skip
            }
        }
    }
}
